{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","key","value","this","setState","id","Math","random","slice","push","console","log","updatedList","filter","item","className","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","deleteItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oQAqGeA,G,kBAjGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAM,CACTC,QAAQ,GACRC,KAAM,IALS,E,yEAUTC,EAAKC,GAEfC,KAAKC,SAAL,eACGH,EAAMC,M,gCAMP,IAAMH,EAAU,CAEdM,GAAI,EAAIC,KAAKC,SACbL,MAAOC,KAAKL,MAAMC,QAAQS,SAGtBR,EAAK,YAAKG,KAAKL,MAAME,MAG3BA,EAAKS,KAAKV,GAIdI,KAAKC,SAAS,CACZJ,OACAD,QAAQ,O,iCAIGM,GACTK,QAAQC,IAAI,WAEb,IAEMC,EAFK,YAAKT,KAAKL,MAAME,MAEFa,QAAO,SAAAC,GAAI,OAAIA,EAAKT,KAAOA,KAEpDF,KAAKC,SAAS,CAACJ,KAAMY,M,+BAGX,IAAD,OACT,OACC,yBAAKG,UAAU,OAEd,yBAAKA,UAAU,YACZ,yBAAKA,UAAU,WACjB,wBAAIA,UAAU,aAAd,YAID,yBAAKA,UAAU,aACb,wBAAIA,UAAU,gBAAd,mBAEA,6BACA,yBAAKA,UAAU,gBACf,2BAAOA,UAAU,QACjBC,KAAK,OACLC,YAAY,2BACZf,MAAOC,KAAKL,MAAMC,QAClBmB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAY,UAAWD,EAAEE,OAAOnB,UAEpD,4BAASa,UAAU,UAEnBO,QAAS,SAAAH,GAAC,OAAI,EAAKI,YAFnB,QAOE,6BACA,4BACGpB,KAAKL,MAAME,KAAKwB,KAAI,SAAAV,GACnB,OACE,wBAAIb,IAAKa,EAAKT,IACVS,EAAKZ,MACN,4BAAQa,UAAU,MAClBO,QAAS,kBAAM,EAAKG,WAAWX,EAAKT,MADpC,qB,GAnFAqB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.4700ba71.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state={\n      newItem:'',\n      list: []\n    }\n  }\n\n  //if I plan to implement localstorage in my project\nupdateInput(key, value) {\n  //update react state \n  this.setState({ \n    [key]: value\n  })\n}\n\n  addItem(){ \n    //create item with unique id\n    const newItem=  {\n      //math.random used so we get a random unique id everytime\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    }\n    //taking the current copy of list of items, i'll use the spread operator to to take the current copy of the list items \n    const list= [...this.state.list]\n\n    //add the new item onto the list\n    list.push(newItem) \n\n    //update state with new list and reset newItem input\n\nthis.setState({\n  list, \n  newItem:''\n    })      \n  }\n\n  deleteItem(id){\n    console.log('test123')\n    //copy current list of items\n   const list= [...this.state.list]\n  //filter out item being deleted\n   const updatedList = list.filter(item => item.id !== id)\n\n   this.setState({list: updatedList})\n  }\n\n  render () {\n   return (\n    <div className=\"App\">\n\n     <div className=\"floating\">\n        <div className=\"tossing\"> \n      <h1 className=\"app-title\"> todo </h1>\n      </div>\n      </div>\n      \n     <div className=\"container\">\n       <h1 className=\"app-subtitle\">  Add An Item..\n         </h1> \n       <br/>\n       <div className=\"main-feature\">\n       <input className=\"input\"\n       type=\"text\"\n       placeholder=\"Type your item in here..\"\n       value={this.state.newItem}\n       onChange={e => this.updateInput(\"newItem\", e.target.value)}\n       />\n       <button  className=\"add-btn\"\n       //onclick will call a function everytime the add button is clicked\n       onClick={e => this.addItem()}\n       >\n         Add\n         </button>\n         </div>\n         <br/>\n         <ul>\n           {this.state.list.map(item => {\n             return(\n               <li key={item.id}>\n                  {item.value}\n                  <button className=\"btn\"\n                  onClick={() => this.deleteItem(item.id)}\n                  >\n                    Delete\n                  </button>\n               </li>\n             )\n           })}\n         </ul>\n     </div>\n    </div>\n  )\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}